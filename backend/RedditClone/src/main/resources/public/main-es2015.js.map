{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/commons/comment.ts","./src/app/commons/login-request.ts","./src/app/commons/post-request.ts","./src/app/commons/post.ts","./src/app/commons/refresh-token.ts","./src/app/commons/register-request.ts","./src/app/commons/subreddit-response.ts","./src/app/commons/vote-type.ts","./src/app/commons/vote.ts","./src/app/components/create-post/create-post.component.ts","./src/app/components/create-post/create-post.component.html","./src/app/components/create-subreddit/create-subreddit.component.ts","./src/app/components/create-subreddit/create-subreddit.component.html","./src/app/components/header/header.component.ts","./src/app/components/header/header.component.html","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/components/list-subreddits/list-subreddits.component.ts","./src/app/components/list-subreddits/list-subreddits.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/post-tile/post-tile.component.ts","./src/app/components/post-tile/post-tile.component.html","./src/app/components/side-bar/side-bar.component.ts","./src/app/components/side-bar/side-bar.component.html","./src/app/components/signup/signup.component.ts","./src/app/components/signup/signup.component.html","./src/app/components/subreddit-side-bar/subreddit-side-bar.component.ts","./src/app/components/subreddit-side-bar/subreddit-side-bar.component.html","./src/app/components/user-profile/user-profile.component.ts","./src/app/components/user-profile/user-profile.component.html","./src/app/components/view-post/view-post.component.ts","./src/app/components/view-post/view-post.component.html","./src/app/components/vote-button/vote-button.component.ts","./src/app/components/vote-button/vote-button.component.html","./src/app/services/auth.service.ts","./src/app/services/comment.service.ts","./src/app/services/post.service.ts","./src/app/services/subreddits.service.ts","./src/app/services/vote.service.ts","./src/app/token-interceptor.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SignupComponent } from './components/signup/signup.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { CreatePostComponent } from './components/create-post/create-post.component';\nimport { CreateSubredditComponent } from './components/create-subreddit/create-subreddit.component';\nimport { ListSubredditsComponent } from './components/list-subreddits/list-subreddits.component';\nimport { ViewPostComponent } from './components/view-post/view-post.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\n\n\nconst routes: Routes = [\n  {path:\"user-profile/:name\",component: UserProfileComponent},\n  {path:\"view-post/:id\",component: ViewPostComponent},\n  {path:\"sign-up\",component: SignupComponent},\n  {path:\"login\",component: LoginComponent},\n  {path:\"\",component: HomeComponent},\n  {path:\"create-post\", component: CreatePostComponent},\n  {path:\"create-subreddit\", component: CreateSubredditComponent},\n  {path:\"list-subreddits\", component: ListSubredditsComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'reddit-clone';\n}\n","<app-header></app-header>\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgxWebstorageModule } from \"ngx-webstorage\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { ToastrModule } from \"ngx-toastr\";\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { EditorModule } from \"@tinymce/tinymce-angular\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\"\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { SignupComponent } from './components/signup/signup.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { PostTileComponent } from './components/post-tile/post-tile.component';\nimport { SideBarComponent } from './components/side-bar/side-bar.component';\nimport { SubredditSideBarComponent } from './components/subreddit-side-bar/subreddit-side-bar.component';\nimport { VoteButtonComponent } from './components/vote-button/vote-button.component';\nimport { TokenInterceptor } from \"./token-interceptor\";\nimport { CreatePostComponent } from './components/create-post/create-post.component';\nimport { CreateSubredditComponent } from './components/create-subreddit/create-subreddit.component';\nimport { ListSubredditsComponent } from './components/list-subreddits/list-subreddits.component';\nimport { ViewPostComponent } from './components/view-post/view-post.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    SignupComponent,\n    LoginComponent,\n    HomeComponent,\n    PostTileComponent,\n    SideBarComponent,\n    SubredditSideBarComponent,\n    VoteButtonComponent,\n    CreatePostComponent,\n    CreateSubredditComponent,\n    ListSubredditsComponent,\n    ViewPostComponent,\n    UserProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    NgxWebstorageModule.forRoot(),\n    BrowserAnimationsModule,\n    ToastrModule.forRoot(),\n    FontAwesomeModule,\n    EditorModule,\n    NgbModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class Comment {\n    duration? : string;    \n    postId : number;\n    text : string;\n    username? : string;\n}\n","export class LoginRequest {\n    username : string;\n    password : string;\n\n    constructor(){\n        this.username = \"\";\n        this.password = \"\";\n    }\n}\n","export class PostRequest {\n  postName : string;\n  subredditName? : string;\n  url? : string;\n  description : string;\n}\n","export class Post {\n  postId: number;\n  postName: string;\n  subredditName: string; \n  userName: string;\n  description: string;\n  url: string;\n  voteCount: number;\n  commentCount: number;\n  duration: string;\n  upVote: boolean;\n  downVote: boolean;\n}\n","export class RefreshToken {\n    refreshToken: string;\n    username: string;\n}\n","export class RegisterRequest {\n  email: string;\n  password: string;\n  repeatedPassword: string;\n  username: string;\n\n  constructor(){\n      this.email=\"\";\n      this.password=\"\";\n      this.repeatedPassword=\"\";\n      this.username=\"\";\n  }\n}\n","export class SubredditResponse {\n    id? : number;\n    name : string;\n    description : string;\n    numberOfPosts? : number; \n}\n","export enum VoteType {\n    UPVOTE,\n    DOWNVOTE\n}","import {VoteType} from \"./vote-type\"\n\nexport class Vote {\n    postId: number;\n    voteType: VoteType;\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { PostService } from \"src/app/services/post.service\";\nimport { SubredditResponse } from \"src/app/commons/subreddit-response\";\nimport { SubredditsService } from \"src/app/services/subreddits.service\";\nimport { PostRequest } from 'src/app/commons/post-request';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: \"app-create-post\",\n  templateUrl: \"./create-post.component.html\",\n  styleUrls: [\"./create-post.component.css\"],\n})\nexport class CreatePostComponent implements OnInit {\n  createPostForm: FormGroup;\n  postRequest : PostRequest;\n  subreddits : Array<SubredditResponse>;\n\n  constructor(\n    private router: Router,\n    private postService: PostService,\n    private subredditService: SubredditsService\n  ) {\n    this.createPostForm = new FormGroup({\n      postName: new FormControl(\"\", Validators.required),\n      url: new FormControl(\"\", Validators.required),\n      subredditName: new FormControl(\"\", Validators.required),\n      description: new FormControl(\"\", Validators.required),\n    });\n    this.postRequest = new PostRequest();\n  }\n\n  ngOnInit(): void {\n    this.subredditService.getAllSubreddits().subscribe(\n      data => {\n        this.subreddits = data;\n      },error =>{\n        throwError(error);\n      }      \n    );\n  }\n\n  discardPost() {\n    this.createPostForm.reset();\n    this.router.navigateByUrl(\"/\");\n  }\n\n  createPost() {\n    this.postRequest.postName = this.createPostForm.get(\"postName\").value\n    this.postRequest.description = this.createPostForm.get(\"description\").value\n    this.postRequest.url = this.createPostForm.get(\"url\").value\n    this.postRequest.subredditName = this.createPostForm.get(\"subredditName\").value\n\n    this.postService.createPost(this.postRequest).subscribe(\n      data =>{\n        this.router.navigateByUrl(\"/\");\n      },error => {\n        throwError(error);\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <hr />\n    <div class=\"create-post-container col-md-9\">\n      <form\n        class=\"post-form\"\n        [formGroup]=\"createPostForm\"\n        (ngSubmit)=\"createPost()\"\n      >\n        <div class=\"form-group\">\n          <div class=\"create-post-heading\">Create Post</div>\n          <hr />\n          <input\n            type=\"text\"\n            [formControlName]=\"'postName'\"\n            class=\"form-control\"\n            style=\"margin-top: 5px;\"\n            placeholder=\"Title\"\n          />\n\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            [formControlName]=\"'url'\"\n            style=\"margin-top: 5px;\"\n            placeholder=\"URL\"\n          />\n\n          <select\n            class=\"form-control\"\n            style=\"margin-top: 10px;\"\n            [formControlName]=\"'subredditName'\"\n          >\n            <option value=\"\" selected disabled>Select Subreddit</option>\n            <option *ngFor=\"let subreddit of subreddits\">{{\n              subreddit.name\n            }}</option>\n          </select>\n\n          <editor\n            [formControlName]=\"'description'\"\n            [init]=\"{\n              height: 500,\n              menubar: false,\n              plugins: [\n                'advlist autolink lists link image charmap print preview anchor',\n                'searchreplace visualblocks code fullscreen',\n                'insertdatetime media table paste code help wordcount'\n              ],\n              toolbar:\n                'undo redo | formatselect | bold italic backcolor | \\\n                          alignleft aligncenter alignright alignjustify | \\\n                          bullist numlist outdent indent | removeformat | help'\n            }\"\n          ></editor>\n          <span>\n            <div style=\"margin-top: 5px;\" class=\"float-right\">\n              <button (click)=\"discardPost()\" class=\"btnDiscard\">\n                Discard\n              </button>\n              <button type=\"submit\" class=\"btnCreatePost\">Post</button>\n            </div>\n          </span>\n        </div>\n      </form>\n    </div>\n    <div class=\"col-md-3\">\n      <!-- <guidelines></guidelines> -->\n      <!-- <about></about> -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { SubredditResponse } from 'src/app/commons/subreddit-response';\nimport { Router } from '@angular/router';\nimport { SubredditsService } from 'src/app/services/subreddits.service';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: 'app-create-subreddit',\n  templateUrl: './create-subreddit.component.html',\n  styleUrls: ['./create-subreddit.component.css']\n})\nexport class CreateSubredditComponent implements OnInit {\n\n  createSubredditForm : FormGroup;\n  subredditModel : SubredditResponse;\n  \n  constructor(private router : Router,\n    private subredditService : SubredditsService) { \n    this.createSubredditForm = new FormGroup({\n      title  : new FormControl(\"\", Validators.required),\n      description : new FormControl(\"\", Validators.required)\n    });\n    this.subredditModel = new SubredditResponse();\n  }\n\n  ngOnInit(): void {\n  }\n\n  discard(){\n    this.createSubredditForm.reset();\n    this.router.navigateByUrl(\"/\");\n  }\n\n  createSubreddit(){\n    this.subredditModel.name = this.createSubredditForm.get(\"title\").value\n    this.subredditModel.description = this.createSubredditForm.get(\"description\").value\n    this.subredditService.createSubreddit(this.subredditModel).subscribe(\n      data => {\n        this.router.navigateByUrl(\"/list-subreddits\");\n      },\n      error => {\n        throwError(error);\n      }\n    );\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"create-subreddit-container\">\n      <form\n        class=\"post-form\"\n        [formGroup]=\"createSubredditForm\"\n        (ngSubmit)=\"createSubreddit()\"\n      >\n        <div class=\"form-group\">\n          <div class=\"create-subreddit-heading\">Create Subreddit</div>\n          <hr />\n          <input\n            type=\"text\"\n            [formControlName]=\"'title'\"\n            class=\"form-control\"\n            style=\"margin-top: 5px;\"\n            placeholder=\"Title\"\n          />\n          <textarea\n            type=\"text\"\n            [formControlName]=\"'description'\"\n            style=\"width: 100%; margin-top: 5px;\"\n            placeholder=\"Description\"\n          ></textarea>\n          <div>\n            <div style=\"margin-top: 5px;\" class=\"float-right\">\n              <button (click)=\"discard()\" class=\"btnDiscard\">Discard</button>\n              <button (click)=\"createSubreddit()\" class=\"btnCreateSubreddit\">\n                Create\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"sidebar\">\n        <h5 class=\"guidelines\">Posting to Spring Reddit</h5>\n        <hr />\n        <ul>\n          <li>Remember the human</li>\n          <hr />\n          <li>Behave like you would in real life</li>\n          <hr />\n          <li>Don't spam</li>\n          <hr />\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { RefreshToken } from 'src/app/commons/refresh-token';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  faUser = faUser;\n  isLoggedIn : boolean;\n  username : string;\n  token : RefreshToken;\n\n  constructor(private router : Router, private authService : AuthService) { }\n\n  ngOnInit() {\n    this.authService.loggedIn.subscribe((data:boolean) => this.isLoggedIn = data);\n    this.authService.username.subscribe((data:string) => this.username = data);\n    this.isLoggedIn = this.authService.isLoggedIn();\n    this.username = this.authService.getUsername();\n    this.token = new RefreshToken();\n  }\n\n  logout(){\n    this.token.refreshToken = this.authService.getRefreshToken();\n    this.token.username = this.authService.getUsername();\n    this.authService.logout(this.token);\n  }\n\n  goToUserProfile() {\n    this.router.navigateByUrl(\"/user-profile/\" + this.username);\n  }\n\n}\n","<header>\n    <nav class=\"navbar fixed-top navbar-expand-lg navbar-light bg-light\">\n        <div class=\"flex-grow-1\">\n            <a aria-label=\"Home\" class=\"logo\" routerLink=\"/\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" class=\"reddit-icon-svg\">\n                    <g>\n                        <circle fill=\"#FF4500\" cx=\"10\" cy=\"10\" r=\"10\"></circle>\n                        <path fill=\"#FFF\"\n                            d=\"M16.67,10A1.46,1.46,0,0,0,14.2,9a7.12,7.12,0,0,0-3.85-1.23L11,4.65,13.14,5.1a1,1,0,1,0,.13-0.61L10.82,4a0.31,0.31,0,0,0-.37.24L9.71,7.71a7.14,7.14,0,0,0-3.9,1.23A1.46,1.46,0,1,0,4.2,11.33a2.87,2.87,0,0,0,0,.44c0,2.24,2.61,4.06,5.83,4.06s5.83-1.82,5.83-4.06a2.87,2.87,0,0,0,0-.44A1.46,1.46,0,0,0,16.67,10Zm-10,1a1,1,0,1,1,1,1A1,1,0,0,1,6.67,11Zm5.81,2.75a3.84,3.84,0,0,1-2.47.77,3.84,3.84,0,0,1-2.47-.77,0.27,0.27,0,0,1,.38-0.38A3.27,3.27,0,0,0,10,14a3.28,3.28,0,0,0,2.09-.61A0.27,0.27,0,1,1,12.48,13.79Zm-0.18-1.71a1,1,0,1,1,1-1A1,1,0,0,1,12.29,12.08Z\">\n                        </path>\n                    </g>\n                </svg>\n                <span class=\"reddit-text\">\n                    Spring Reddit Clone\n                </span>\n            </a>\n        </div>\n        <div class=\"flex-grow-1 float-right\">\n            <div *ngIf=\"isLoggedIn\" ngbDropdown class=\"float-right\">\n                <div ngbDropdownMenu aria-labelledby=\"dropdownBasic1\">\n                    <button (click)=\"goToUserProfile()\" ngbDropdownItem>Profile</button>\n                    <button (click)=\"logout()\" ngbDropdownItem>Logout</button>\n                </div>\n                <button class=\"userdetails\" id=\"dropdownBasic1\" ngbDropdownToggle>\n                    <img class=\"account-icon\" src=\"https://www.redditstatic.com/avatars/avatar_default_08_D4E815.png\">\n                    {{username}}\n                </button>\n            </div>            \n            <div *ngIf=\"!isLoggedIn\">\n                <a routerLink=\"/sign-up\" class=\"float-right sign-up mr-2\">Sign up</a>\n                <a routerLink=\"/login\" class=\"float-right login mr-2\">Login</a>\n            </div>\n        </div>\n    </nav>\n</header>","import { Component, OnInit } from '@angular/core';\nimport { Post } from 'src/app/commons/post';\nimport { PostService } from 'src/app/services/post.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  posts$ : Array<Post> = [];\n  \n  constructor(private postService : PostService) {\n    postService.getAllSubreddits().subscribe(\n      data => this.posts$ = data\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"reddit-body\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <hr />\n      <div class=\"col-md-9\">\n        <app-post-tile [data]=\"posts$\"></app-post-tile>\n      </div>\n      <div class=\"col-md-3\">\n        <app-side-bar></app-side-bar>\n        <app-subreddit-side-bar></app-subreddit-side-bar>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { SubredditResponse } from 'src/app/commons/subreddit-response';\nimport { SubredditsService } from 'src/app/services/subreddits.service';\n\n@Component({\n  selector: 'app-list-subreddits',\n  templateUrl: './list-subreddits.component.html',\n  styleUrls: ['./list-subreddits.component.css']\n})\nexport class ListSubredditsComponent implements OnInit {\n\n  subreddits: Array<SubredditResponse> ;\n  constructor(private subredditService: SubredditsService) { }\n\n  ngOnInit() {\n    this.subredditService.getAllSubreddits().subscribe(data => {\n      this.subreddits = data;\n    }, error => {\n      throwError(error);\n    })\n  }\n}","<div class=\"container\">\n  <div class=\"row\">\n    <hr />\n    <div class=\"col-md-9\">\n      <h2>List of Subreddits</h2>\n      <ul>\n        <li *ngFor=\"let subreddit of subreddits\">\n          <a routerLink=\"/view-subreddit/{{ subreddit.id }}\">{{\n            subreddit.name\n          }}</a>\n        </li>\n      </ul>\n    </div>\n    <div class=\"col-md-3\">\n      <app-side-bar></app-side-bar>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { LoginRequest } from 'src/app/commons/login-request';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { isError } from 'util';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm : FormGroup;\n  loginRequest : LoginRequest;\n  registerSuccesMessage: string;\n  isError: boolean;\n\n  constructor(private authService: AuthService,\n    private activatedRoute : ActivatedRoute,\n    private router : Router,\n    private toastr : ToastrService) {\n    this.loginRequest = new LoginRequest();\n  }\n\n  ngOnInit() {\n    this.loginForm=new FormGroup({\n      username: new FormControl(\"\", Validators.required),\n      password: new FormControl(\"\", Validators.required),    \n    });\n\n    this.activatedRoute.queryParams.subscribe(params => {\n      if(params.registered !== undefined && params.registered === \"true\"){\n        this.toastr.success(\"Signup Succesful\");\n        this.registerSuccesMessage = \"Please check your inbox for activation email \"\n          + \"activate your account before you Login!\";  \n      }\n    });\n  }\n\n  login(){\n    this.loginRequest.username = this.loginForm.get(\"username\").value;\n    this.loginRequest.password = this.loginForm.get(\"password\").value;\n    this.authService.login(this.loginRequest).subscribe(\n      data => {\n        if(data){\n          this.isError = false;\n          this.router.navigateByUrl(\"/\");\n          this.toastr.success(\"Login Succesful\");\n        }else{\n          this.isError = true;\n        }\n      }\n    );\n  }\n\n}\n","<div class=\"login-section\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n            <div class=\"card\">\n                <div class=\"card-header\" style=\"text-align: center\"><h4>Login</h4></div>\n                <div class=\"card-body\">\n                    <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n                        <div class=\"form-group row\">\n                            <label for=\"user_name\" class=\"col-md-4 col-form-label text-md-right\">Username</label>\n                            <div class=\"col-md-6\">\n                                <input type=\"text\" id=\"user_name\" class=\"form-control\" [formControlName]=\"'username'\" name=\"user_name\" required\n                                    autofocus>\n                                <span *ngIf=\"!loginForm.get('username').valid && loginForm.get('username').touched\">\n                                    Please provide a valid username\n                                </span>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group row\">\n                            <label for=\"password\" class=\"col-md-4 col-form-label text-md-right\">Password</label>\n                            <div class=\"col-md-6\">\n                                <input type=\"password\" id=\"password\" class=\"form-control\" [formControlName]=\"'password'\" name=\"password\" required>\n                                <span *ngIf=\"!loginForm.get('password').valid && loginForm.get('password').touched\">\n                                    Please provide a valid password\n                                </span>\n                            </div>\n                        </div>\n\n                        <span class=\"col-md-6 offset-md-4\">\n                            <button type=\"submit\" class=\"login\">\n                                Login\n                            </button>\n                            <span style=\"padding-left: 15px\">New to SpringReddit? <a routerLink=\"/signup\">SIGN UP</a></span>\n                        </span>   \n                        <div class=\"login-failed\" *ngIf='this.isError'>\n                             <p class=\"login-failed-text\">Login Failed. Please check your credentials and try again.</p>   \n                        </div>   \n                        <div class=\"login-failed\" [ngStyle]=\"{'background-color' : 'green'}\" *ngIf=\"this.registerSuccesMessage\">\n                            <p class=\"register-success-text\">{{ registerSuccesMessage }}</p>\n                        </div>                  \n                    </form>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-md-3\"></div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Post } from 'src/app/commons/post';\nimport { faComments } from \"@fortawesome/free-solid-svg-icons\";\n\n@Component({\n  selector: 'app-post-tile',\n  templateUrl: './post-tile.component.html',\n  styleUrls: ['./post-tile.component.css']\n})\nexport class PostTileComponent implements OnInit {\n  \n  @Input() data : Array<Post>\n  faComments = faComments;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row post\" *ngFor=\"let post of data\">\n    <div class=\"col-md-1\">\n        <app-vote-button [post]=\"post\"></app-vote-button>\n    </div>\n    <div class=\"col-md-11\">\n        <span class=\"subreddit-info\">\n            <span class=\"subreddit-text\"><a class=\"posturl\" routerLink=\"\">{{post.subredditName}}</a></span>\n            <span> . Posted by <a class=\"username\" routerLink=\"/user/{{post.userName}}\">{{post.userName}}</a></span>\n            <span> . {{post.duration}}</span>\n        </span>\n        <hr />\n        <div class=\"post-title\">\n            <a class=\"postname\" href=\"{{post.url}}\">{{post.postName}}</a>\n        </div>\n        <div>\n            <p class=\"post-text\" [innerHtml]=\"post.description\"></p>\n        </div>\n        <hr />\n        <span>\n            <a class=\"btnCommments\" role=\"button\">\n                <fa-icon [icon]=\"faComments\"></fa-icon>\n                Comments({{post.commentNum}})\n            </a> \n            <button class=\"login\" routerLink=\"/view-post/{{post.postId}}\">\n                Read Post\n            </button>\n        </span>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.css']\n})\nexport class SideBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"sidebar\">\n    <img src=\"https://www.redditstatic.com/desktop2x/img/id-cards/home-banner@2x.png\">\n    <div style=\"text-align: center; font-size: 1em\">Welcome to Spring Reddit Clone home page. Come here to\n        check in with your favorite subreddits.</div>\n    <div style=\"text-align: center\">\n        <button class=\"btnCreatePost\" routerLink=\"/create-post\">Create Post</button>\n    </div>\n    <div style=\"text-align: center\">\n        <button class=\"btnCreateSubreddit\" routerLink=\"/create-subreddit\">Create Subreddit</button>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { RegisterRequest } from 'src/app/commons/register-request';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { ToastrModule, ToastrService } from 'ngx-toastr';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  registerRequest: RegisterRequest;\n  signupForm: FormGroup;\n\n  constructor(private authService : AuthService,\n    private router : Router,\n    private toastr : ToastrService) {\n    this.registerRequest = new RegisterRequest(); \n  }\n\n  ngOnInit() {  \n    this.signupForm = new FormGroup({\n      username: new FormControl(\"\",Validators.required),\n      email: new FormControl(\"\",[Validators.required, Validators.email]),\n      password: new FormControl(\"\",[Validators.required,Validators.minLength(6)]),\n      confirmPassword: new FormControl(\"\",Validators.required),\n    });\n  }\n\n  signup(){\n    this.registerRequest.email = this.signupForm.get(\"email\").value;\n    this.registerRequest.password = this.signupForm.get(\"password\").value;\n    this.registerRequest.repeatedPassword = this.signupForm.get(\"confirmPassword\").value;\n    this.registerRequest.username = this.signupForm.get(\"username\").value;\n    this.authService.signup(this.registerRequest).subscribe(\n      () => {\n        this.router.navigate(\n          [\"/login\"],\n          {\n            queryParams:{  registered : \"true\" }\n          }\n        );\n      },\n      (error) => {\n        console.log(error);\n        this.toastr.error(\"Registration error! Please try again\");\n      }\n    );\n    \n  }\n  \n  valid() : boolean{\n    return this.signupForm.get(\"username\").valid;\n  }\n\n}\n","<div class=\"register-section\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-3\"></div>\n    <div class=\"col-md-6\">\n      <div class=\"card\">\n        <div class=\"card-header\" style=\"text-align: center;\">\n          <h4>Register</h4>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"signupForm\" (ngSubmit)=\"valid() && signup()\">\n            <div class=\"form-group row\">\n              <label\n                for=\"email_address\"\n                class=\"col-md-4 col-form-label text-md-right\"\n                >E-Mail Address</label\n              >\n              <div class=\"col-md-6\">\n                <input\n                  type=\"text\"\n                  [formControlName]=\"'email'\"\n                  id=\"email_address\"\n                  class=\"form-control\"\n                  name=\"email-address\"\n                  required\n                  autofocus\n                />\n                <span\n                  *ngIf=\"\n                    !signupForm.get('email').valid &&\n                    signupForm.get('email').touched\n                  \"\n                >\n                  Please provide a valid email\n                </span>\n              </div>\n            </div>\n\n            <div class=\"form-group row\">\n              <label class=\"col-md-4 col-form-label text-md-right\"\n                >User Name</label\n              >\n              <div class=\"col-md-6\">\n                <input\n                  type=\"text\"\n                  [formControlName]=\"'username'\"\n                  class=\"form-control\"\n                  required\n                  autofocus\n                />\n                <span\n                  *ngIf=\"\n                    !signupForm.get('username').valid &&\n                    signupForm.get('username').touched\n                  \"\n                >\n                  Please provide a valid username\n                </span>\n              </div>\n            </div>\n\n            <div class=\"form-group row\">\n              <label\n                for=\"password\"\n                class=\"col-md-4 col-form-label text-md-right\"\n                >Password</label\n              >\n              <div class=\"col-md-6\">\n                <input\n                  type=\"password\"\n                  [formControlName]=\"'password'\"\n                  id=\"password\"\n                  class=\"form-control\"\n                  name=\"password\"\n                  required\n                />\n                <span\n                  *ngIf=\"\n                    !signupForm.get('password').valid &&\n                    signupForm.get('password').touched\n                  \"\n                >\n                  Please provide a valid Password\n                </span>\n              </div>\n            </div>\n\n            <div class=\"form-group row\">\n                <label\n                  for=\"confirmPassword\"\n                  class=\"col-md-4 col-form-label text-md-right\"\n                  >Confirm password</label\n                >\n                <div class=\"col-md-6\">\n                  <input\n                    type=\"password\"\n                    [formControlName]=\"'confirmPassword'\"\n                    id=\"confirmPassword\"\n                    class=\"form-control\"\n                    name=\"confirmPassword\"\n                    required\n                  />\n                  <span\n                    *ngIf=\"\n                      !signupForm.get('confirmPassword').valid &&\n                      signupForm.get('confirmPassword').touched\n                    \"\n                  >\n                    Passwords must match\n                  </span>\n                </div>\n              </div>\n\n            <span class=\"col-md-6 offset-md-4\">\n              <button type=\"submit\" class=\"btn btn-primary sign-up\">\n                Sign Up\n              </button>\n              <span style=\"padding-left: 15px;\"\n                >Existing user? <a routerLink=\"/login\">Log In</a></span\n              >\n            </span>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-3\"></div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { SubredditsService } from 'src/app/services/subreddits.service';\nimport { SubredditResponse } from 'src/app/commons/subreddit-response';\n\n@Component({\n  selector: 'app-subreddit-side-bar',\n  templateUrl: './subreddit-side-bar.component.html',\n  styleUrls: ['./subreddit-side-bar.component.css']\n})\nexport class SubredditSideBarComponent implements OnInit {\n\n  subreddits: Array<SubredditResponse> = [];\n  dispayViewAll: boolean;\n  \n  constructor(private subredditService : SubredditsService) {\n    subredditService.getAllSubreddits().subscribe(\n      data => {\n        if (data.length >=4 ){\n          this.subreddits = data.splice(0,3);\n          this.dispayViewAll = true;\n        }else{\n          this.subreddits = data;\n          this.dispayViewAll = false;\n        }\n      }\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"sidebar-view-subreddit\">\n    <div style=\"color: black; font-weight: bold\">Browse Subreddits</div>\n    <hr />\n    <span *ngFor=\"let subreddit of subreddits\">\n        <span class=\"subreddit-text\"><a href=\"/view-subreddit/{{subreddit.id}}\">{{subreddit.name}}</a></span>\n        <hr />\n    </span>\n    <div style=\"text-align: center\">\n        <a style=\"font-weight: bold\" routerLink=\"/subreddits\" routerLink=\"/list-subreddits\" *ngIf=\"dispayViewAll\">View All</a>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Post } from \"src/app/commons/post\";\nimport { Comment } from \"src/app/commons/comment\";\nimport { CommentService } from \"src/app/services/comment.service\";\nimport { PostService } from 'src/app/services/post.service';\n\n@Component({\n  selector: \"app-user-profile\",\n  templateUrl: \"./user-profile.component.html\",\n  styleUrls: [\"./user-profile.component.css\"],\n})\nexport class UserProfileComponent implements OnInit {\n  name: string;\n  posts: Post[];\n  comments: Comment[];\n  postLength: number;\n  commentLength: number;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private postService: PostService,\n    private commentService: CommentService\n  ) {\n    this.name = this.activatedRoute.snapshot.params.name;\n\n    this.postService.getAllPostsByUser(this.name).subscribe((data) => {\n      this.posts = data;\n      this.postLength = data.length;\n    });\n    this.commentService.getAllCommentsByUser(this.name).subscribe((data) => {\n      this.comments = data;\n      this.commentLength = data.length;\n    });\n  }\n\n  ngOnInit(): void {}\n}\n","<div class=\"container\">\n    <div>\n      Welcome <b>{{name}}</b>.<br /> You have posted <b>{{postLength}}</b> time(s) and commented\n      <b>{{commentLength}}</b> time(s).\n      You can check your post and comment history below.\n    </div>\n    <hr />\n    <div>\n      Your Posts:\n    </div>\n    <app-post-tile [data]=\"posts\"></app-post-tile>\n    <hr />\n    <div>\n      Your Comments:\n    </div>\n    <div *ngFor=\"let comment of comments\">\n      <div class=\"comment\">\n        <div class=\"username\">\n          <a routerLink=\"/user/comment.username\">{{comment.userName}}</a>\n        </div>\n        <div>\n          <p>{{comment.duration}}</p>\n        </div>\n        <b>{{comment.text}}</b>\n      </div>\n      <hr />\n    </div>\n  </div>","import { Component, OnInit } from \"@angular/core\";\nimport { Post } from \"src/app/commons/post\";\nimport { PostService } from \"src/app/services/post.service\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { throwError, from } from 'rxjs';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CommentService } from 'src/app/services/comment.service';\nimport { Comment } from \"src/app/commons/comment\";\n\n@Component({\n  selector: \"app-view-post\",\n  templateUrl: \"./view-post.component.html\",\n  styleUrls: [\"./view-post.component.css\"],\n})\nexport class ViewPostComponent implements OnInit {\n  postId: number;\n  post: Post = new Post();\n  commentForm : FormGroup;\n  commentModel : Comment;\n  comments : Array<Comment>;\n\n  constructor(\n    private postService: PostService,\n    private activatedRoute: ActivatedRoute,\n    private commentService : CommentService\n  ) {\n    this.postId = activatedRoute.snapshot.params.id;\n    this.commentForm = new FormGroup({\n      text : new FormControl(\"\", Validators.required)\n    });\n    this.commentModel = new Comment();        \n  }\n\n  ngOnInit(): void {\n    this.getPost();\n    this.getCommentsById(); \n  }\n\n  getCommentsById(){\n    this.commentService.getCommentsByPost(this.postId).subscribe(\n      data => {\n        this.comments = data;\n      },error => {\n        throwError(error);\n      }\n    )\n  }\n\n  postComment(){\n    this.commentModel.text = this.commentForm.get(\"text\").value;\n    this.commentModel.postId = this.postId;\n    this.commentService.postComment(this.commentModel).subscribe(\n      data => {\n        this.commentForm.reset();\n        this.getCommentsById();\n      },error => {\n        throwError(error);\n      }\n    );\n  }\n\n  getPost(){\n    this.postService.getPost(this.postId).subscribe(\n      data => {\n        this.post = data;\n        if(this.post.description === null){\n          this.post.description = \"Vacio\";\n        }        \n      },error => {\n        throwError(error);\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <hr />\n    <div class=\"col-md-9\">\n      <div class=\"row post\">\n        <div class=\"col-md-1\">\n          <app-vote-button [post]=\"post\"></app-vote-button>\n        </div>\n        <div class=\"col-md-11\">\n          <span>\n            <span class=\"subreddit-text\"\n              ><a class=\"post-url\" href=\"\">{{ post.subredditName }}</a></span\n            >\n            <span>\n              . Posted\n              <span> {{ post.duration }} </span>\n              by\n              <a *ngIf=\"post.userName === null\" class=\"username\" href=\"\"\n                >Anonymous</a\n              >\n              <a *ngIf=\"post.userName != null\" class=\"username\" href=\"\">{{\n                post.userName\n              }}</a>\n            </span>\n          </span>\n          <hr />\n          <a routerLink=\"post.url\" class=\"post-title\">{{ post.postName }}</a>\n          <div>\n            <p class=\"post-text\" [innerHtml]=\"post.description\"></p>\n          </div>\n          <div class=\"post-comment\">\n            <form [formGroup]=\"commentForm\" (ngSubmit)=\"postComment()\">\n              <div class=\"form-group\">\n                <textarea\n                  class=\"form-control\"\n                  [formControlName]=\"'text'\"\n                  placeholder=\"Your Thoughts?\"\n                ></textarea>\n              </div>\n              <button type=\"submit\" class=\"login float-right\">Comment</button>\n            </form>\n          </div>\n          <div style=\"margin-top: 60px;\" *ngFor=\"let comment of comments\">\n            <div class=\"comment\">\n              <div class=\"username\">\n                <a routerLink=\"/user/comment.username\">{{\n                  comment.userName\n                }}</a>\n              </div>\n              <div>\n                <p>{{ comment.duration }}</p>\n              </div>\n              <b>{{ comment.text }}</b>\n            </div>\n            <hr />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <app-side-bar></app-side-bar>\n      <app-subreddit-side-bar></app-subreddit-side-bar>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { Post } from \"src/app/commons/post\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { VoteService } from \"src/app/services/vote.service\";\nimport { Vote } from \"src/app/commons/vote\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { PostService } from \"src/app/services/post.service\";\nimport { AuthService } from \"src/app/services/auth.service\";\nimport { VoteType } from 'src/app/commons/vote-type';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: \"app-vote-button\",\n  templateUrl: \"./vote-button.component.html\",\n  styleUrls: [\"./vote-button.component.css\"],\n})\nexport class VoteButtonComponent implements OnInit {\n  @Input() post: Post;\n  faArrowUp = faArrowUp;\n  faArrowDown = faArrowDown;\n  voteModel: Vote;\n  upVoteColor: string;\n  downVoteColor: string;\n\n  constructor(\n    private voteService: VoteService,\n    private toastrService: ToastrService,\n    private postService: PostService,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.voteModel = new Vote();\n  }\n\n  downVote() {\n    this.voteModel.voteType = VoteType.DOWNVOTE;\n    this.vote();\n  }\n\n  upVote() {\n    this.voteModel.voteType = VoteType.UPVOTE;\n    this.vote();\n  }\n\n  vote() {\n    this.voteModel.postId = this.post.postId;\n    this.voteService.vote(this.voteModel).subscribe(\n      () => {\n        this.updateVoteDetails();\n      },error => {\n        this.toastrService.error(error.error.message);\n        throwError(error);\n      }\n    );  \n  }\n  updateVoteDetails() {\n    this.postService.getPost(this.post.postId).subscribe(\n      data => this.post = data\n    );\n  }\n}\n","<div class=\"d-flex flex-column votebox\">\n    <div class=\"p-2\">\n        <fa-icon (click)=\"upVote()\" class=\"upvote\" [icon]=\"faArrowUp\" [style.color]=\"post.upVote ? 'green':''\"></fa-icon>\n    </div>\n    <div class=\"p-2 votecount\">{{post.voteCount}}</div>\n    <div class=\"p-2\">\n        <fa-icon (click)=\"downVote()\" class=\"downvote\" [icon]=\"faArrowDown\" [style.color]=\"post.downVote ? 'red':''\"></fa-icon>\n    </div>\n</div>","import { Injectable, Output, EventEmitter } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { RegisterRequest } from \"../commons/register-request\";\nimport { Observable, throwError } from \"rxjs\";\nimport { map, tap } from \"rxjs/operators\";\nimport { LoginRequest } from \"../commons/login-request\";\nimport { LoginResponse } from \"../commons/login-response\";\nimport { LocalStorageService } from \"ngx-webstorage\";\nimport { RefreshToken } from '../commons/refresh-token';\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n\n  @Output() loggedIn: EventEmitter<boolean> = new EventEmitter();\n  @Output() username: EventEmitter<string> = new EventEmitter();\n\n  isLoggedIn(): boolean {\n    return this.getJwtToken() !== null;\n  }\n  refreshToken() {\n    const refresTokenRequest = {\n      refreshToken: this.getRefreshToken(),\n      username: this.getUsername(),\n    };\n\n    return this.httpClient\n      .post<LoginResponse>(\n        \"/api/auth/refresh/token\",\n        refresTokenRequest\n      )\n      .pipe(\n        tap((res) => {\n          this.localStorage.store(\n            \"authenticationToken\",\n            res.authenticationToken\n          );\n          this.localStorage.store(\"expiresAt\", res.expiresAt);\n        })\n      );\n  }\n  getRefreshToken() {\n    return this.localStorage.retrieve(\"refreshToken\");\n  }\n  getUsername() {\n    return this.localStorage.retrieve(\"username\");\n  }\n  getJwtToken() {\n    return this.localStorage.retrieve(\"authenticationToken\");\n  }\n\n  constructor(\n    private httpClient: HttpClient,\n    private localStorage: LocalStorageService\n  ) {}\n\n  login(loginRequest: LoginRequest): Observable<boolean> {\n    return this.httpClient\n      .post<LoginResponse>(\"/api/auth/login\", loginRequest)\n      .pipe(\n        map((data) => {\n          this.localStorage.store(\n            \"authenticationToken\",\n            data.authenticationToken\n          );\n          this.localStorage.store(\"refreshToken\", data.refreshToken);\n          this.localStorage.store(\"username\", data.username);\n          this.localStorage.store(\"expiresAt\", data.expiresAt);\n          \n          this.loggedIn.emit(true);\n          this.username.emit(data.username);\n          return true;\n        })\n      );\n  }\n\n  signup(registerRequest: RegisterRequest): Observable<any> {\n    return this.httpClient.post(\n      \"/api/auth/signup\",\n      registerRequest,\n      {\n        responseType : \"text\"\n      }\n    );\n  }\n  \n  logout(token : RefreshToken){\n    this.httpClient.post(\n      \"/api/auth/logout\",\n      token,\n      {\n        responseType : \"text\"\n      }\n    ).subscribe(\n      data => {\n        console.log(data);\n      },error => {\n        throwError(error);\n      }\n    );\n    this.localStorage.clear(\"authenticationToken\");\n    this.localStorage.clear(\"username\");\n    this.localStorage.clear(\"refreshToken\");\n    this.localStorage.clear(\"expiresAt\");\n\n    this.loggedIn.emit(false);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { Comment } from \"src/app/commons/comment\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CommentService {\n  getAllCommentsByUser(name: string) : Observable<Array<Comment>> {\n    return this.httpClient.get<Array<Comment>>(\n      \"/api/comments/by-user/\" + name\n    );\n  }\n\n  postComment(comment: Comment): Observable<any> {\n    return this.httpClient.post(\n      \"/api/comments/\", comment\n    );\n  }\n  constructor(private httpClient: HttpClient) {}\n\n  getCommentsByPost(id: number): Observable<Array<Comment>> {\n    return this.httpClient.get<Array<Comment>>(\n      \"/api/comments/by-post/\" + id\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { Post } from '../commons/post';\nimport { PostRequest } from '../commons/post-request';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  \n  getAllPostsByUser(name: string) : Observable<Array<Post>> {\n    return this.httpClient.get<Array<Post>>(\n      \"/api/posts/by-user/\" + name\n    );\n  }\n  \n  getPost(postId: number) : Observable<Post>{\n    return this.httpClient.get<Post>(\n      \"/api/posts/\"+postId\n    );\n  }\n\n  createPost(postRequest: PostRequest) : Observable<any> {\n    return this.httpClient.post(\n      \"/api/posts/\",\n      postRequest\n    );\n  }\n\n  constructor(private httpClient : HttpClient) { }\n\n  getAllSubreddits(): Observable<Array<Post>>{\n    return this.httpClient.get<Array<Post>>(\n      \"/api/posts/\"\n    );\n  }\n}\n","import { Injectable } from '@angular/core'; \nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { SubredditResponse } from '../commons/subreddit-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubredditsService {\n  createSubreddit(subredditModel: SubredditResponse) :Observable<SubredditResponse>{\n    return this.httpClient.post<SubredditResponse>(\n      \"/api/subreddit\",\n      subredditModel\n    );\n  }\n\n  constructor(private httpClient : HttpClient) { }\n\n  getAllSubreddits(): Observable<Array<SubredditResponse>>{\n    return this.httpClient.get<Array<SubredditResponse>>(\n      \"/api/subreddit\"\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Vote } from '../commons/vote';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VoteService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  vote(vote : Vote) : Observable<any> {\n    return this.httpClient.post(\n      \"/api/votes/\",\n      vote\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse,\n} from \"@angular/common/http\";\nimport { AuthService } from \"./services/auth.service\";\nimport { Observable, throwError, BehaviorSubject } from \"rxjs\";\nimport { catchError, switchMap, filter, take } from \"rxjs/operators\";\nimport { LoginResponse } from \"./commons/login-response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TokenInterceptor implements HttpInterceptor {\n  isTokenRefreshing = false;\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject(null);\n\n  constructor(public authService: AuthService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (\n      req.url.indexOf(\"refresh\") !== -1 ||\n      req.url.indexOf(\"login\") !== -1 ||\n      req.url.indexOf(\"signup\") !== -1\n    ) {\n      return next.handle(req);\n    }\n\n    const jwtToken = this.authService.getJwtToken();\n\n    if(jwtToken){\n      return next.handle(this.addToken(req, jwtToken)).pipe(\n        catchError((error) => {\n          if (error instanceof HttpErrorResponse && error.status === 403) {\n            return this.handleAuthErrors(req, next);\n          } else {\n            return throwError(error);\n          }\n        })\n      );\n    }\n    return next.handle(req);\n  }\n\n  addToken(req: HttpRequest<any>, jwtToken: any) {\n    return req.clone({\n      headers: req.headers.set(\"Authorization\", `Bearer ${jwtToken}`),\n    });\n  }\n\n  private handleAuthErrors(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.isTokenRefreshing) {\n      this.isTokenRefreshing = true;\n      this.refreshTokenSubject.next(null);\n\n      return this.authService.refreshToken().pipe(\n        switchMap((refreshTokenResponse: LoginResponse) => {\n          this.isTokenRefreshing = true;\n          this.refreshTokenSubject.next(\n            refreshTokenResponse.authenticationToken\n          );\n          return next.handle(\n            this.addToken(req, refreshTokenResponse.authenticationToken)\n          );\n        })\n      );\n    } else {\n      return this.refreshTokenSubject.pipe(\n        filter((result) => result !== null),\n        take(1),\n        switchMap((res) => {\n          return next.handle(this.addToken(req, this.authService.getJwtToken));\n        })\n      );\n    }\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"api\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}