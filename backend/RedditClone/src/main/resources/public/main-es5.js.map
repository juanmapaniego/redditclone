{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/commons/comment.ts","webpack:///src/app/commons/login-request.ts","webpack:///src/app/commons/post-request.ts","webpack:///src/app/commons/post.ts","webpack:///src/app/commons/refresh-token.ts","webpack:///src/app/commons/register-request.ts","webpack:///src/app/commons/subreddit-response.ts","webpack:///src/app/commons/vote-type.ts","webpack:///src/app/commons/vote.ts","webpack:///src/app/components/create-post/create-post.component.ts","webpack:///src/app/components/create-post/create-post.component.html","webpack:///src/app/components/create-subreddit/create-subreddit.component.ts","webpack:///src/app/components/create-subreddit/create-subreddit.component.html","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/list-subreddits/list-subreddits.component.ts","webpack:///src/app/components/list-subreddits/list-subreddits.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/post-tile/post-tile.component.ts","webpack:///src/app/components/post-tile/post-tile.component.html","webpack:///src/app/components/side-bar/side-bar.component.ts","webpack:///src/app/components/side-bar/side-bar.component.html","webpack:///src/app/components/signup/signup.component.ts","webpack:///src/app/components/signup/signup.component.html","webpack:///src/app/components/subreddit-side-bar/subreddit-side-bar.component.ts","webpack:///src/app/components/subreddit-side-bar/subreddit-side-bar.component.html","webpack:///src/app/components/user-profile/user-profile.component.ts","webpack:///src/app/components/user-profile/user-profile.component.html","webpack:///src/app/components/view-post/view-post.component.ts","webpack:///src/app/components/view-post/view-post.component.html","webpack:///src/app/components/vote-button/vote-button.component.ts","webpack:///src/app/components/vote-button/vote-button.component.html","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/comment.service.ts","webpack:///src/app/services/post.service.ts","webpack:///src/app/services/subreddits.service.ts","webpack:///src/app/services/vote.service.ts","webpack:///src/app/token-interceptor.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","Comment","LoginRequest","username","password","PostRequest","Post","RefreshToken","RegisterRequest","email","repeatedPassword","SubredditResponse","VoteType","Vote","CreatePostComponent","router","postService","subredditService","createPostForm","postName","required","url","subredditName","description","postRequest","getAllSubreddits","subscribe","data","subreddits","error","reset","navigateByUrl","get","value","createPost","discardPost","CreateSubredditComponent","createSubredditForm","subredditModel","name","createSubreddit","discard","HeaderComponent","authService","faUser","loggedIn","isLoggedIn","getUsername","token","refreshToken","getRefreshToken","logout","HomeComponent","posts$","ListSubredditsComponent","LoginComponent","activatedRoute","toastr","loginRequest","loginForm","queryParams","params","registered","undefined","success","registerSuccesMessage","login","isError","PostTileComponent","faComments","SideBarComponent","SignupComponent","registerRequest","signupForm","minLength","confirmPassword","signup","navigate","console","log","valid","SubredditSideBarComponent","length","splice","dispayViewAll","UserProfileComponent","commentService","snapshot","getAllPostsByUser","posts","postLength","getAllCommentsByUser","comments","commentLength","ViewPostComponent","post","postId","commentForm","text","commentModel","getPost","getCommentsById","getCommentsByPost","postComment","VoteButtonComponent","voteService","toastrService","faArrowUp","faArrowDown","voteModel","voteType","DOWNVOTE","vote","UPVOTE","updateVoteDetails","message","upVote","downVote","AuthService","httpClient","localStorage","getJwtToken","refresTokenRequest","pipe","res","store","authenticationToken","expiresAt","retrieve","emit","responseType","clear","providedIn","CommentService","comment","PostService","SubredditsService","VoteService","TokenInterceptor","isTokenRefreshing","refreshTokenSubject","next","indexOf","handle","jwtToken","addToken","status","handleAuthErrors","clone","headers","set","refreshTokenResponse","result","environment","production","apiUrl","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SignupComponent } from './components/signup/signup.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { CreatePostComponent } from './components/create-post/create-post.component';\nimport { CreateSubredditComponent } from './components/create-subreddit/create-subreddit.component';\nimport { ListSubredditsComponent } from './components/list-subreddits/list-subreddits.component';\nimport { ViewPostComponent } from './components/view-post/view-post.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\n\n\nconst routes: Routes = [\n  {path:\"user-profile/:name\",component: UserProfileComponent},\n  {path:\"view-post/:id\",component: ViewPostComponent},\n  {path:\"sign-up\",component: SignupComponent},\n  {path:\"login\",component: LoginComponent},\n  {path:\"\",component: HomeComponent},\n  {path:\"create-post\", component: CreatePostComponent},\n  {path:\"create-subreddit\", component: CreateSubredditComponent},\n  {path:\"list-subreddits\", component: ListSubredditsComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'reddit-clone';\n}\n","<app-header></app-header>\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgxWebstorageModule } from \"ngx-webstorage\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { ToastrModule } from \"ngx-toastr\";\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { EditorModule } from \"@tinymce/tinymce-angular\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\"\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { SignupComponent } from './components/signup/signup.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { PostTileComponent } from './components/post-tile/post-tile.component';\nimport { SideBarComponent } from './components/side-bar/side-bar.component';\nimport { SubredditSideBarComponent } from './components/subreddit-side-bar/subreddit-side-bar.component';\nimport { VoteButtonComponent } from './components/vote-button/vote-button.component';\nimport { TokenInterceptor } from \"./token-interceptor\";\nimport { CreatePostComponent } from './components/create-post/create-post.component';\nimport { CreateSubredditComponent } from './components/create-subreddit/create-subreddit.component';\nimport { ListSubredditsComponent } from './components/list-subreddits/list-subreddits.component';\nimport { ViewPostComponent } from './components/view-post/view-post.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    SignupComponent,\n    LoginComponent,\n    HomeComponent,\n    PostTileComponent,\n    SideBarComponent,\n    SubredditSideBarComponent,\n    VoteButtonComponent,\n    CreatePostComponent,\n    CreateSubredditComponent,\n    ListSubredditsComponent,\n    ViewPostComponent,\n    UserProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    NgxWebstorageModule.forRoot(),\n    BrowserAnimationsModule,\n    ToastrModule.forRoot(),\n    FontAwesomeModule,\n    EditorModule,\n    NgbModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class Comment {\n    duration? : string;    \n    postId : number;\n    text : string;\n    username? : string;\n}\n","export class LoginRequest {\n    username : string;\n    password : string;\n\n    constructor(){\n        this.username = \"\";\n        this.password = \"\";\n    }\n}\n","export class PostRequest {\n  postName : string;\n  subredditName? : string;\n  url? : string;\n  description : string;\n}\n","export class Post {\n  postId: number;\n  postName: string;\n  subredditName: string; \n  userName: string;\n  description: string;\n  url: string;\n  voteCount: number;\n  commentCount: number;\n  duration: string;\n  upVote: boolean;\n  downVote: boolean;\n}\n","export class RefreshToken {\n    refreshToken: string;\n    username: string;\n}\n","export class RegisterRequest {\n  email: string;\n  password: string;\n  repeatedPassword: string;\n  username: string;\n\n  constructor(){\n      this.email=\"\";\n      this.password=\"\";\n      this.repeatedPassword=\"\";\n      this.username=\"\";\n  }\n}\n","export class SubredditResponse {\n    id? : number;\n    name : string;\n    description : string;\n    numberOfPosts? : number; \n}\n","export enum VoteType {\n    UPVOTE,\n    DOWNVOTE\n}","import {VoteType} from \"./vote-type\"\n\nexport class Vote {\n    postId: number;\n    voteType: VoteType;\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { PostService } from \"src/app/services/post.service\";\nimport { SubredditResponse } from \"src/app/commons/subreddit-response\";\nimport { SubredditsService } from \"src/app/services/subreddits.service\";\nimport { PostRequest } from 'src/app/commons/post-request';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: \"app-create-post\",\n  templateUrl: \"./create-post.component.html\",\n  styleUrls: [\"./create-post.component.css\"],\n})\nexport class CreatePostComponent implements OnInit {\n  createPostForm: FormGroup;\n  postRequest : PostRequest;\n  subreddits : Array<SubredditResponse>;\n\n  constructor(\n    private router: Router,\n    private postService: PostService,\n    private subredditService: SubredditsService\n  ) {\n    this.createPostForm = new FormGroup({\n      postName: new FormControl(\"\", Validators.required),\n      url: new FormControl(\"\", Validators.required),\n      subredditName: new FormControl(\"\", Validators.required),\n      description: new FormControl(\"\", Validators.required),\n    });\n    this.postRequest = new PostRequest();\n  }\n\n  ngOnInit(): void {\n    this.subredditService.getAllSubreddits().subscribe(\n      data => {\n        this.subreddits = data;\n      },error =>{\n        throwError(error);\n      }      \n    );\n  }\n\n  discardPost() {\n    this.createPostForm.reset();\n    this.router.navigateByUrl(\"/\");\n  }\n\n  createPost() {\n    this.postRequest.postName = this.createPostForm.get(\"postName\").value\n    this.postRequest.description = this.createPostForm.get(\"description\").value\n    this.postRequest.url = this.createPostForm.get(\"url\").value\n    this.postRequest.subredditName = this.createPostForm.get(\"subredditName\").value\n\n    this.postService.createPost(this.postRequest).subscribe(\n      data =>{\n        this.router.navigateByUrl(\"/\");\n      },error => {\n        throwError(error);\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <hr />\n    <div class=\"create-post-container col-md-9\">\n      <form\n        class=\"post-form\"\n        [formGroup]=\"createPostForm\"\n        (ngSubmit)=\"createPost()\"\n      >\n        <div class=\"form-group\">\n          <div class=\"create-post-heading\">Create Post</div>\n          <hr />\n          <input\n            type=\"text\"\n            [formControlName]=\"'postName'\"\n            class=\"form-control\"\n            style=\"margin-top: 5px;\"\n            placeholder=\"Title\"\n          />\n\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            [formControlName]=\"'url'\"\n            style=\"margin-top: 5px;\"\n            placeholder=\"URL\"\n          />\n\n          <select\n            class=\"form-control\"\n            style=\"margin-top: 10px;\"\n            [formControlName]=\"'subredditName'\"\n          >\n            <option value=\"\" selected disabled>Select Subreddit</option>\n            <option *ngFor=\"let subreddit of subreddits\">{{\n              subreddit.name\n            }}</option>\n          </select>\n\n          <editor\n            [formControlName]=\"'description'\"\n            [init]=\"{\n              height: 500,\n              menubar: false,\n              plugins: [\n                'advlist autolink lists link image charmap print preview anchor',\n                'searchreplace visualblocks code fullscreen',\n                'insertdatetime media table paste code help wordcount'\n              ],\n              toolbar:\n                'undo redo | formatselect | bold italic backcolor | \\\n                          alignleft aligncenter alignright alignjustify | \\\n                          bullist numlist outdent indent | removeformat | help'\n            }\"\n          ></editor>\n          <span>\n            <div style=\"margin-top: 5px;\" class=\"float-right\">\n              <button (click)=\"discardPost()\" class=\"btnDiscard\">\n                Discard\n              </button>\n              <button type=\"submit\" class=\"btnCreatePost\">Post</button>\n            </div>\n          </span>\n        </div>\n      </form>\n    </div>\n    <div class=\"col-md-3\">\n      <!-- <guidelines></guidelines> -->\n      <!-- <about></about> -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { SubredditResponse } from 'src/app/commons/subreddit-response';\nimport { Router } from '@angular/router';\nimport { SubredditsService } from 'src/app/services/subreddits.service';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: 'app-create-subreddit',\n  templateUrl: './create-subreddit.component.html',\n  styleUrls: ['./create-subreddit.component.css']\n})\nexport class CreateSubredditComponent implements OnInit {\n\n  createSubredditForm : FormGroup;\n  subredditModel : SubredditResponse;\n  \n  constructor(private router : Router,\n    private subredditService : SubredditsService) { \n    this.createSubredditForm = new FormGroup({\n      title  : new FormControl(\"\", Validators.required),\n      description : new FormControl(\"\", Validators.required)\n    });\n    this.subredditModel = new SubredditResponse();\n  }\n\n  ngOnInit(): void {\n  }\n\n  discard(){\n    this.createSubredditForm.reset();\n    this.router.navigateByUrl(\"/\");\n  }\n\n  createSubreddit(){\n    this.subredditModel.name = this.createSubredditForm.get(\"title\").value\n    this.subredditModel.description = this.createSubredditForm.get(\"description\").value\n    this.subredditService.createSubreddit(this.subredditModel).subscribe(\n      data => {\n        this.router.navigateByUrl(\"/list-subreddits\");\n      },\n      error => {\n        throwError(error);\n      }\n    );\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"create-subreddit-container\">\n      <form\n        class=\"post-form\"\n        [formGroup]=\"createSubredditForm\"\n        (ngSubmit)=\"createSubreddit()\"\n      >\n        <div class=\"form-group\">\n          <div class=\"create-subreddit-heading\">Create Subreddit</div>\n          <hr />\n          <input\n            type=\"text\"\n            [formControlName]=\"'title'\"\n            class=\"form-control\"\n            style=\"margin-top: 5px;\"\n            placeholder=\"Title\"\n          />\n          <textarea\n            type=\"text\"\n            [formControlName]=\"'description'\"\n            style=\"width: 100%; margin-top: 5px;\"\n            placeholder=\"Description\"\n          ></textarea>\n          <div>\n            <div style=\"margin-top: 5px;\" class=\"float-right\">\n              <button (click)=\"discard()\" class=\"btnDiscard\">Discard</button>\n              <button (click)=\"createSubreddit()\" class=\"btnCreateSubreddit\">\n                Create\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"sidebar\">\n        <h5 class=\"guidelines\">Posting to Spring Reddit</h5>\n        <hr />\n        <ul>\n          <li>Remember the human</li>\n          <hr />\n          <li>Behave like you would in real life</li>\n          <hr />\n          <li>Don't spam</li>\n          <hr />\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { RefreshToken } from 'src/app/commons/refresh-token';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  faUser = faUser;\n  isLoggedIn : boolean;\n  username : string;\n  token : RefreshToken;\n\n  constructor(private router : Router, private authService : AuthService) { }\n\n  ngOnInit() {\n    this.authService.loggedIn.subscribe((data:boolean) => this.isLoggedIn = data);\n    this.authService.username.subscribe((data:string) => this.username = data);\n    this.isLoggedIn = this.authService.isLoggedIn();\n    this.username = this.authService.getUsername();\n    this.token = new RefreshToken();\n  }\n\n  logout(){\n    this.token.refreshToken = this.authService.getRefreshToken();\n    this.token.username = this.authService.getUsername();\n    this.authService.logout(this.token);\n  }\n\n  goToUserProfile() {\n    this.router.navigateByUrl(\"/user-profile/\" + this.username);\n  }\n\n}\n","<header>\n    <nav class=\"navbar fixed-top navbar-expand-lg navbar-light bg-light\">\n        <div class=\"flex-grow-1\">\n            <a aria-label=\"Home\" class=\"logo\" routerLink=\"/\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" class=\"reddit-icon-svg\">\n                    <g>\n                        <circle fill=\"#FF4500\" cx=\"10\" cy=\"10\" r=\"10\"></circle>\n                        <path fill=\"#FFF\"\n                            d=\"M16.67,10A1.46,1.46,0,0,0,14.2,9a7.12,7.12,0,0,0-3.85-1.23L11,4.65,13.14,5.1a1,1,0,1,0,.13-0.61L10.82,4a0.31,0.31,0,0,0-.37.24L9.71,7.71a7.14,7.14,0,0,0-3.9,1.23A1.46,1.46,0,1,0,4.2,11.33a2.87,2.87,0,0,0,0,.44c0,2.24,2.61,4.06,5.83,4.06s5.83-1.82,5.83-4.06a2.87,2.87,0,0,0,0-.44A1.46,1.46,0,0,0,16.67,10Zm-10,1a1,1,0,1,1,1,1A1,1,0,0,1,6.67,11Zm5.81,2.75a3.84,3.84,0,0,1-2.47.77,3.84,3.84,0,0,1-2.47-.77,0.27,0.27,0,0,1,.38-0.38A3.27,3.27,0,0,0,10,14a3.28,3.28,0,0,0,2.09-.61A0.27,0.27,0,1,1,12.48,13.79Zm-0.18-1.71a1,1,0,1,1,1-1A1,1,0,0,1,12.29,12.08Z\">\n                        </path>\n                    </g>\n                </svg>\n                <span class=\"reddit-text\">\n                    Spring Reddit Clone\n                </span>\n            </a>\n        </div>\n        <div class=\"flex-grow-1 float-right\">\n            <div *ngIf=\"isLoggedIn\" ngbDropdown class=\"float-right\">\n                <div ngbDropdownMenu aria-labelledby=\"dropdownBasic1\">\n                    <button (click)=\"goToUserProfile()\" ngbDropdownItem>Profile</button>\n                    <button (click)=\"logout()\" ngbDropdownItem>Logout</button>\n                </div>\n                <button class=\"userdetails\" id=\"dropdownBasic1\" ngbDropdownToggle>\n                    <img class=\"account-icon\" src=\"https://www.redditstatic.com/avatars/avatar_default_08_D4E815.png\">\n                    {{username}}\n                </button>\n            </div>            \n            <div *ngIf=\"!isLoggedIn\">\n                <a routerLink=\"/sign-up\" class=\"float-right sign-up mr-2\">Sign up</a>\n                <a routerLink=\"/login\" class=\"float-right login mr-2\">Login</a>\n            </div>\n        </div>\n    </nav>\n</header>","import { Component, OnInit } from '@angular/core';\nimport { Post } from 'src/app/commons/post';\nimport { PostService } from 'src/app/services/post.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  posts$ : Array<Post> = [];\n  \n  constructor(private postService : PostService) {\n    postService.getAllSubreddits().subscribe(\n      data => this.posts$ = data\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"reddit-body\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <hr />\n      <div class=\"col-md-9\">\n        <app-post-tile [data]=\"posts$\"></app-post-tile>\n      </div>\n      <div class=\"col-md-3\">\n        <app-side-bar></app-side-bar>\n        <app-subreddit-side-bar></app-subreddit-side-bar>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { SubredditResponse } from 'src/app/commons/subreddit-response';\nimport { SubredditsService } from 'src/app/services/subreddits.service';\n\n@Component({\n  selector: 'app-list-subreddits',\n  templateUrl: './list-subreddits.component.html',\n  styleUrls: ['./list-subreddits.component.css']\n})\nexport class ListSubredditsComponent implements OnInit {\n\n  subreddits: Array<SubredditResponse> ;\n  constructor(private subredditService: SubredditsService) { }\n\n  ngOnInit() {\n    this.subredditService.getAllSubreddits().subscribe(data => {\n      this.subreddits = data;\n    }, error => {\n      throwError(error);\n    })\n  }\n}","<div class=\"container\">\n  <div class=\"row\">\n    <hr />\n    <div class=\"col-md-9\">\n      <h2>List of Subreddits</h2>\n      <ul>\n        <li *ngFor=\"let subreddit of subreddits\">\n          <a routerLink=\"/view-subreddit/{{ subreddit.id }}\">{{\n            subreddit.name\n          }}</a>\n        </li>\n      </ul>\n    </div>\n    <div class=\"col-md-3\">\n      <app-side-bar></app-side-bar>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { LoginRequest } from 'src/app/commons/login-request';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { isError } from 'util';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm : FormGroup;\n  loginRequest : LoginRequest;\n  registerSuccesMessage: string;\n  isError: boolean;\n\n  constructor(private authService: AuthService,\n    private activatedRoute : ActivatedRoute,\n    private router : Router,\n    private toastr : ToastrService) {\n    this.loginRequest = new LoginRequest();\n  }\n\n  ngOnInit() {\n    this.loginForm=new FormGroup({\n      username: new FormControl(\"\", Validators.required),\n      password: new FormControl(\"\", Validators.required),    \n    });\n\n    this.activatedRoute.queryParams.subscribe(params => {\n      if(params.registered !== undefined && params.registered === \"true\"){\n        this.toastr.success(\"Signup Succesful\");\n        this.registerSuccesMessage = \"Please check your inbox for activation email \"\n          + \"activate your account before you Login!\";  \n      }\n    });\n  }\n\n  login(){\n    this.loginRequest.username = this.loginForm.get(\"username\").value;\n    this.loginRequest.password = this.loginForm.get(\"password\").value;\n    this.authService.login(this.loginRequest).subscribe(\n      data => {\n        if(data){\n          this.isError = false;\n          this.router.navigateByUrl(\"/\");\n          this.toastr.success(\"Login Succesful\");\n        }else{\n          this.isError = true;\n        }\n      }\n    );\n  }\n\n}\n","<div class=\"login-section\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n            <div class=\"card\">\n                <div class=\"card-header\" style=\"text-align: center\"><h4>Login</h4></div>\n                <div class=\"card-body\">\n                    <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n                        <div class=\"form-group row\">\n                            <label for=\"user_name\" class=\"col-md-4 col-form-label text-md-right\">Username</label>\n                            <div class=\"col-md-6\">\n                                <input type=\"text\" id=\"user_name\" class=\"form-control\" [formControlName]=\"'username'\" name=\"user_name\" required\n                                    autofocus>\n                                <span *ngIf=\"!loginForm.get('username').valid && loginForm.get('username').touched\">\n                                    Please provide a valid username\n                                </span>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group row\">\n                            <label for=\"password\" class=\"col-md-4 col-form-label text-md-right\">Password</label>\n                            <div class=\"col-md-6\">\n                                <input type=\"password\" id=\"password\" class=\"form-control\" [formControlName]=\"'password'\" name=\"password\" required>\n                                <span *ngIf=\"!loginForm.get('password').valid && loginForm.get('password').touched\">\n                                    Please provide a valid password\n                                </span>\n                            </div>\n                        </div>\n\n                        <span class=\"col-md-6 offset-md-4\">\n                            <button type=\"submit\" class=\"login\">\n                                Login\n                            </button>\n                            <span style=\"padding-left: 15px\">New to SpringReddit? <a routerLink=\"/signup\">SIGN UP</a></span>\n                        </span>   \n                        <div class=\"login-failed\" *ngIf='this.isError'>\n                             <p class=\"login-failed-text\">Login Failed. Please check your credentials and try again.</p>   \n                        </div>   \n                        <div class=\"login-failed\" [ngStyle]=\"{'background-color' : 'green'}\" *ngIf=\"this.registerSuccesMessage\">\n                            <p class=\"register-success-text\">{{ registerSuccesMessage }}</p>\n                        </div>                  \n                    </form>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-md-3\"></div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Post } from 'src/app/commons/post';\nimport { faComments } from \"@fortawesome/free-solid-svg-icons\";\n\n@Component({\n  selector: 'app-post-tile',\n  templateUrl: './post-tile.component.html',\n  styleUrls: ['./post-tile.component.css']\n})\nexport class PostTileComponent implements OnInit {\n  \n  @Input() data : Array<Post>\n  faComments = faComments;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row post\" *ngFor=\"let post of data\">\n    <div class=\"col-md-1\">\n        <app-vote-button [post]=\"post\"></app-vote-button>\n    </div>\n    <div class=\"col-md-11\">\n        <span class=\"subreddit-info\">\n            <span class=\"subreddit-text\"><a class=\"posturl\" routerLink=\"\">{{post.subredditName}}</a></span>\n            <span> . Posted by <a class=\"username\" routerLink=\"/user/{{post.userName}}\">{{post.userName}}</a></span>\n            <span> . {{post.duration}}</span>\n        </span>\n        <hr />\n        <div class=\"post-title\">\n            <a class=\"postname\" href=\"{{post.url}}\">{{post.postName}}</a>\n        </div>\n        <div>\n            <p class=\"post-text\" [innerHtml]=\"post.description\"></p>\n        </div>\n        <hr />\n        <span>\n            <a class=\"btnCommments\" role=\"button\">\n                <fa-icon [icon]=\"faComments\"></fa-icon>\n                Comments({{post.commentNum}})\n            </a> \n            <button class=\"login\" routerLink=\"/view-post/{{post.postId}}\">\n                Read Post\n            </button>\n        </span>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.css']\n})\nexport class SideBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"sidebar\">\n    <img src=\"https://www.redditstatic.com/desktop2x/img/id-cards/home-banner@2x.png\">\n    <div style=\"text-align: center; font-size: 1em\">Welcome to Spring Reddit Clone home page. Come here to\n        check in with your favorite subreddits.</div>\n    <div style=\"text-align: center\">\n        <button class=\"btnCreatePost\" routerLink=\"/create-post\">Create Post</button>\n    </div>\n    <div style=\"text-align: center\">\n        <button class=\"btnCreateSubreddit\" routerLink=\"/create-subreddit\">Create Subreddit</button>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { RegisterRequest } from 'src/app/commons/register-request';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { ToastrModule, ToastrService } from 'ngx-toastr';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  registerRequest: RegisterRequest;\n  signupForm: FormGroup;\n\n  constructor(private authService : AuthService,\n    private router : Router,\n    private toastr : ToastrService) {\n    this.registerRequest = new RegisterRequest(); \n  }\n\n  ngOnInit() {  \n    this.signupForm = new FormGroup({\n      username: new FormControl(\"\",Validators.required),\n      email: new FormControl(\"\",[Validators.required, Validators.email]),\n      password: new FormControl(\"\",[Validators.required,Validators.minLength(6)]),\n      confirmPassword: new FormControl(\"\",Validators.required),\n    });\n  }\n\n  signup(){\n    this.registerRequest.email = this.signupForm.get(\"email\").value;\n    this.registerRequest.password = this.signupForm.get(\"password\").value;\n    this.registerRequest.repeatedPassword = this.signupForm.get(\"confirmPassword\").value;\n    this.registerRequest.username = this.signupForm.get(\"username\").value;\n    this.authService.signup(this.registerRequest).subscribe(\n      () => {\n        this.router.navigate(\n          [\"/login\"],\n          {\n            queryParams:{  registered : \"true\" }\n          }\n        );\n      },\n      (error) => {\n        console.log(error);\n        this.toastr.error(\"Registration error! Please try again\");\n      }\n    );\n    \n  }\n  \n  valid() : boolean{\n    return this.signupForm.get(\"username\").valid;\n  }\n\n}\n","<div class=\"register-section\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-3\"></div>\n    <div class=\"col-md-6\">\n      <div class=\"card\">\n        <div class=\"card-header\" style=\"text-align: center;\">\n          <h4>Register</h4>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"signupForm\" (ngSubmit)=\"valid() && signup()\">\n            <div class=\"form-group row\">\n              <label\n                for=\"email_address\"\n                class=\"col-md-4 col-form-label text-md-right\"\n                >E-Mail Address</label\n              >\n              <div class=\"col-md-6\">\n                <input\n                  type=\"text\"\n                  [formControlName]=\"'email'\"\n                  id=\"email_address\"\n                  class=\"form-control\"\n                  name=\"email-address\"\n                  required\n                  autofocus\n                />\n                <span\n                  *ngIf=\"\n                    !signupForm.get('email').valid &&\n                    signupForm.get('email').touched\n                  \"\n                >\n                  Please provide a valid email\n                </span>\n              </div>\n            </div>\n\n            <div class=\"form-group row\">\n              <label class=\"col-md-4 col-form-label text-md-right\"\n                >User Name</label\n              >\n              <div class=\"col-md-6\">\n                <input\n                  type=\"text\"\n                  [formControlName]=\"'username'\"\n                  class=\"form-control\"\n                  required\n                  autofocus\n                />\n                <span\n                  *ngIf=\"\n                    !signupForm.get('username').valid &&\n                    signupForm.get('username').touched\n                  \"\n                >\n                  Please provide a valid username\n                </span>\n              </div>\n            </div>\n\n            <div class=\"form-group row\">\n              <label\n                for=\"password\"\n                class=\"col-md-4 col-form-label text-md-right\"\n                >Password</label\n              >\n              <div class=\"col-md-6\">\n                <input\n                  type=\"password\"\n                  [formControlName]=\"'password'\"\n                  id=\"password\"\n                  class=\"form-control\"\n                  name=\"password\"\n                  required\n                />\n                <span\n                  *ngIf=\"\n                    !signupForm.get('password').valid &&\n                    signupForm.get('password').touched\n                  \"\n                >\n                  Please provide a valid Password\n                </span>\n              </div>\n            </div>\n\n            <div class=\"form-group row\">\n                <label\n                  for=\"confirmPassword\"\n                  class=\"col-md-4 col-form-label text-md-right\"\n                  >Confirm password</label\n                >\n                <div class=\"col-md-6\">\n                  <input\n                    type=\"password\"\n                    [formControlName]=\"'confirmPassword'\"\n                    id=\"confirmPassword\"\n                    class=\"form-control\"\n                    name=\"confirmPassword\"\n                    required\n                  />\n                  <span\n                    *ngIf=\"\n                      !signupForm.get('confirmPassword').valid &&\n                      signupForm.get('confirmPassword').touched\n                    \"\n                  >\n                    Passwords must match\n                  </span>\n                </div>\n              </div>\n\n            <span class=\"col-md-6 offset-md-4\">\n              <button type=\"submit\" class=\"btn btn-primary sign-up\">\n                Sign Up\n              </button>\n              <span style=\"padding-left: 15px;\"\n                >Existing user? <a routerLink=\"/login\">Log In</a></span\n              >\n            </span>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-3\"></div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { SubredditsService } from 'src/app/services/subreddits.service';\nimport { SubredditResponse } from 'src/app/commons/subreddit-response';\n\n@Component({\n  selector: 'app-subreddit-side-bar',\n  templateUrl: './subreddit-side-bar.component.html',\n  styleUrls: ['./subreddit-side-bar.component.css']\n})\nexport class SubredditSideBarComponent implements OnInit {\n\n  subreddits: Array<SubredditResponse> = [];\n  dispayViewAll: boolean;\n  \n  constructor(private subredditService : SubredditsService) {\n    subredditService.getAllSubreddits().subscribe(\n      data => {\n        if (data.length >=4 ){\n          this.subreddits = data.splice(0,3);\n          this.dispayViewAll = true;\n        }else{\n          this.subreddits = data;\n          this.dispayViewAll = false;\n        }\n      }\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"sidebar-view-subreddit\">\n    <div style=\"color: black; font-weight: bold\">Browse Subreddits</div>\n    <hr />\n    <span *ngFor=\"let subreddit of subreddits\">\n        <span class=\"subreddit-text\"><a href=\"/view-subreddit/{{subreddit.id}}\">{{subreddit.name}}</a></span>\n        <hr />\n    </span>\n    <div style=\"text-align: center\">\n        <a style=\"font-weight: bold\" routerLink=\"/subreddits\" routerLink=\"/list-subreddits\" *ngIf=\"dispayViewAll\">View All</a>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Post } from \"src/app/commons/post\";\nimport { Comment } from \"src/app/commons/comment\";\nimport { CommentService } from \"src/app/services/comment.service\";\nimport { PostService } from 'src/app/services/post.service';\n\n@Component({\n  selector: \"app-user-profile\",\n  templateUrl: \"./user-profile.component.html\",\n  styleUrls: [\"./user-profile.component.css\"],\n})\nexport class UserProfileComponent implements OnInit {\n  name: string;\n  posts: Post[];\n  comments: Comment[];\n  postLength: number;\n  commentLength: number;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private postService: PostService,\n    private commentService: CommentService\n  ) {\n    this.name = this.activatedRoute.snapshot.params.name;\n\n    this.postService.getAllPostsByUser(this.name).subscribe((data) => {\n      this.posts = data;\n      this.postLength = data.length;\n    });\n    this.commentService.getAllCommentsByUser(this.name).subscribe((data) => {\n      this.comments = data;\n      this.commentLength = data.length;\n    });\n  }\n\n  ngOnInit(): void {}\n}\n","<div class=\"container\">\n    <div>\n      Welcome <b>{{name}}</b>.<br /> You have posted <b>{{postLength}}</b> time(s) and commented\n      <b>{{commentLength}}</b> time(s).\n      You can check your post and comment history below.\n    </div>\n    <hr />\n    <div>\n      Your Posts:\n    </div>\n    <app-post-tile [data]=\"posts\"></app-post-tile>\n    <hr />\n    <div>\n      Your Comments:\n    </div>\n    <div *ngFor=\"let comment of comments\">\n      <div class=\"comment\">\n        <div class=\"username\">\n          <a routerLink=\"/user/comment.username\">{{comment.userName}}</a>\n        </div>\n        <div>\n          <p>{{comment.duration}}</p>\n        </div>\n        <b>{{comment.text}}</b>\n      </div>\n      <hr />\n    </div>\n  </div>","import { Component, OnInit } from \"@angular/core\";\nimport { Post } from \"src/app/commons/post\";\nimport { PostService } from \"src/app/services/post.service\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { throwError, from } from 'rxjs';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CommentService } from 'src/app/services/comment.service';\nimport { Comment } from \"src/app/commons/comment\";\n\n@Component({\n  selector: \"app-view-post\",\n  templateUrl: \"./view-post.component.html\",\n  styleUrls: [\"./view-post.component.css\"],\n})\nexport class ViewPostComponent implements OnInit {\n  postId: number;\n  post: Post = new Post();\n  commentForm : FormGroup;\n  commentModel : Comment;\n  comments : Array<Comment>;\n\n  constructor(\n    private postService: PostService,\n    private activatedRoute: ActivatedRoute,\n    private commentService : CommentService\n  ) {\n    this.postId = activatedRoute.snapshot.params.id;\n    this.commentForm = new FormGroup({\n      text : new FormControl(\"\", Validators.required)\n    });\n    this.commentModel = new Comment();        \n  }\n\n  ngOnInit(): void {\n    this.getPost();\n    this.getCommentsById(); \n  }\n\n  getCommentsById(){\n    this.commentService.getCommentsByPost(this.postId).subscribe(\n      data => {\n        this.comments = data;\n      },error => {\n        throwError(error);\n      }\n    )\n  }\n\n  postComment(){\n    this.commentModel.text = this.commentForm.get(\"text\").value;\n    this.commentModel.postId = this.postId;\n    this.commentService.postComment(this.commentModel).subscribe(\n      data => {\n        this.commentForm.reset();\n        this.getCommentsById();\n      },error => {\n        throwError(error);\n      }\n    );\n  }\n\n  getPost(){\n    this.postService.getPost(this.postId).subscribe(\n      data => {\n        this.post = data;\n        if(this.post.description === null){\n          this.post.description = \"Vacio\";\n        }        \n      },error => {\n        throwError(error);\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <hr />\n    <div class=\"col-md-9\">\n      <div class=\"row post\">\n        <div class=\"col-md-1\">\n          <app-vote-button [post]=\"post\"></app-vote-button>\n        </div>\n        <div class=\"col-md-11\">\n          <span>\n            <span class=\"subreddit-text\"\n              ><a class=\"post-url\" href=\"\">{{ post.subredditName }}</a></span\n            >\n            <span>\n              . Posted\n              <span> {{ post.duration }} </span>\n              by\n              <a *ngIf=\"post.userName === null\" class=\"username\" href=\"\"\n                >Anonymous</a\n              >\n              <a *ngIf=\"post.userName != null\" class=\"username\" href=\"\">{{\n                post.userName\n              }}</a>\n            </span>\n          </span>\n          <hr />\n          <a routerLink=\"post.url\" class=\"post-title\">{{ post.postName }}</a>\n          <div>\n            <p class=\"post-text\" [innerHtml]=\"post.description\"></p>\n          </div>\n          <div class=\"post-comment\">\n            <form [formGroup]=\"commentForm\" (ngSubmit)=\"postComment()\">\n              <div class=\"form-group\">\n                <textarea\n                  class=\"form-control\"\n                  [formControlName]=\"'text'\"\n                  placeholder=\"Your Thoughts?\"\n                ></textarea>\n              </div>\n              <button type=\"submit\" class=\"login float-right\">Comment</button>\n            </form>\n          </div>\n          <div style=\"margin-top: 60px;\" *ngFor=\"let comment of comments\">\n            <div class=\"comment\">\n              <div class=\"username\">\n                <a routerLink=\"/user/comment.username\">{{\n                  comment.userName\n                }}</a>\n              </div>\n              <div>\n                <p>{{ comment.duration }}</p>\n              </div>\n              <b>{{ comment.text }}</b>\n            </div>\n            <hr />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <app-side-bar></app-side-bar>\n      <app-subreddit-side-bar></app-subreddit-side-bar>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { Post } from \"src/app/commons/post\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { VoteService } from \"src/app/services/vote.service\";\nimport { Vote } from \"src/app/commons/vote\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { PostService } from \"src/app/services/post.service\";\nimport { AuthService } from \"src/app/services/auth.service\";\nimport { VoteType } from 'src/app/commons/vote-type';\nimport { throwError } from 'rxjs';\n\n@Component({\n  selector: \"app-vote-button\",\n  templateUrl: \"./vote-button.component.html\",\n  styleUrls: [\"./vote-button.component.css\"],\n})\nexport class VoteButtonComponent implements OnInit {\n  @Input() post: Post;\n  faArrowUp = faArrowUp;\n  faArrowDown = faArrowDown;\n  voteModel: Vote;\n  upVoteColor: string;\n  downVoteColor: string;\n\n  constructor(\n    private voteService: VoteService,\n    private toastrService: ToastrService,\n    private postService: PostService,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.voteModel = new Vote();\n  }\n\n  downVote() {\n    this.voteModel.voteType = VoteType.DOWNVOTE;\n    this.vote();\n  }\n\n  upVote() {\n    this.voteModel.voteType = VoteType.UPVOTE;\n    this.vote();\n  }\n\n  vote() {\n    this.voteModel.postId = this.post.postId;\n    this.voteService.vote(this.voteModel).subscribe(\n      () => {\n        this.updateVoteDetails();\n      },error => {\n        this.toastrService.error(error.error.message);\n        throwError(error);\n      }\n    );  \n  }\n  updateVoteDetails() {\n    this.postService.getPost(this.post.postId).subscribe(\n      data => this.post = data\n    );\n  }\n}\n","<div class=\"d-flex flex-column votebox\">\n    <div class=\"p-2\">\n        <fa-icon (click)=\"upVote()\" class=\"upvote\" [icon]=\"faArrowUp\" [style.color]=\"post.upVote ? 'green':''\"></fa-icon>\n    </div>\n    <div class=\"p-2 votecount\">{{post.voteCount}}</div>\n    <div class=\"p-2\">\n        <fa-icon (click)=\"downVote()\" class=\"downvote\" [icon]=\"faArrowDown\" [style.color]=\"post.downVote ? 'red':''\"></fa-icon>\n    </div>\n</div>","import { Injectable, Output, EventEmitter } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { RegisterRequest } from \"../commons/register-request\";\nimport { Observable, throwError } from \"rxjs\";\nimport { map, tap } from \"rxjs/operators\";\nimport { LoginRequest } from \"../commons/login-request\";\nimport { LoginResponse } from \"../commons/login-response\";\nimport { LocalStorageService } from \"ngx-webstorage\";\nimport { RefreshToken } from '../commons/refresh-token';\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n\n  @Output() loggedIn: EventEmitter<boolean> = new EventEmitter();\n  @Output() username: EventEmitter<string> = new EventEmitter();\n\n  isLoggedIn(): boolean {\n    return this.getJwtToken() !== null;\n  }\n  refreshToken() {\n    const refresTokenRequest = {\n      refreshToken: this.getRefreshToken(),\n      username: this.getUsername(),\n    };\n\n    return this.httpClient\n      .post<LoginResponse>(\n        \"/api/auth/refresh/token\",\n        refresTokenRequest\n      )\n      .pipe(\n        tap((res) => {\n          this.localStorage.store(\n            \"authenticationToken\",\n            res.authenticationToken\n          );\n          this.localStorage.store(\"expiresAt\", res.expiresAt);\n        })\n      );\n  }\n  getRefreshToken() {\n    return this.localStorage.retrieve(\"refreshToken\");\n  }\n  getUsername() {\n    return this.localStorage.retrieve(\"username\");\n  }\n  getJwtToken() {\n    return this.localStorage.retrieve(\"authenticationToken\");\n  }\n\n  constructor(\n    private httpClient: HttpClient,\n    private localStorage: LocalStorageService\n  ) {}\n\n  login(loginRequest: LoginRequest): Observable<boolean> {\n    return this.httpClient\n      .post<LoginResponse>(\"/api/auth/login\", loginRequest)\n      .pipe(\n        map((data) => {\n          this.localStorage.store(\n            \"authenticationToken\",\n            data.authenticationToken\n          );\n          this.localStorage.store(\"refreshToken\", data.refreshToken);\n          this.localStorage.store(\"username\", data.username);\n          this.localStorage.store(\"expiresAt\", data.expiresAt);\n          \n          this.loggedIn.emit(true);\n          this.username.emit(data.username);\n          return true;\n        })\n      );\n  }\n\n  signup(registerRequest: RegisterRequest): Observable<any> {\n    return this.httpClient.post(\n      \"/api/auth/signup\",\n      registerRequest,\n      {\n        responseType : \"text\"\n      }\n    );\n  }\n  \n  logout(token : RefreshToken){\n    this.httpClient.post(\n      \"/api/auth/logout\",\n      token,\n      {\n        responseType : \"text\"\n      }\n    ).subscribe(\n      data => {\n        console.log(data);\n      },error => {\n        throwError(error);\n      }\n    );\n    this.localStorage.clear(\"authenticationToken\");\n    this.localStorage.clear(\"username\");\n    this.localStorage.clear(\"refreshToken\");\n    this.localStorage.clear(\"expiresAt\");\n\n    this.loggedIn.emit(false);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { Comment } from \"src/app/commons/comment\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CommentService {\n  getAllCommentsByUser(name: string) : Observable<Array<Comment>> {\n    return this.httpClient.get<Array<Comment>>(\n      \"/api/comments/by-user/\" + name\n    );\n  }\n\n  postComment(comment: Comment): Observable<any> {\n    return this.httpClient.post(\n      \"/api/comments/\", comment\n    );\n  }\n  constructor(private httpClient: HttpClient) {}\n\n  getCommentsByPost(id: number): Observable<Array<Comment>> {\n    return this.httpClient.get<Array<Comment>>(\n      \"/api/comments/by-post/\" + id\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { Post } from '../commons/post';\nimport { PostRequest } from '../commons/post-request';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  \n  getAllPostsByUser(name: string) : Observable<Array<Post>> {\n    return this.httpClient.get<Array<Post>>(\n      \"/api/posts/by-user/\" + name\n    );\n  }\n  \n  getPost(postId: number) : Observable<Post>{\n    return this.httpClient.get<Post>(\n      \"/api/posts/\"+postId\n    );\n  }\n\n  createPost(postRequest: PostRequest) : Observable<any> {\n    return this.httpClient.post(\n      \"/api/posts/\",\n      postRequest\n    );\n  }\n\n  constructor(private httpClient : HttpClient) { }\n\n  getAllSubreddits(): Observable<Array<Post>>{\n    return this.httpClient.get<Array<Post>>(\n      \"/api/posts/\"\n    );\n  }\n}\n","import { Injectable } from '@angular/core'; \nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { SubredditResponse } from '../commons/subreddit-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubredditsService {\n  createSubreddit(subredditModel: SubredditResponse) :Observable<SubredditResponse>{\n    return this.httpClient.post<SubredditResponse>(\n      \"/api/subreddit\",\n      subredditModel\n    );\n  }\n\n  constructor(private httpClient : HttpClient) { }\n\n  getAllSubreddits(): Observable<Array<SubredditResponse>>{\n    return this.httpClient.get<Array<SubredditResponse>>(\n      \"/api/subreddit\"\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Vote } from '../commons/vote';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VoteService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  vote(vote : Vote) : Observable<any> {\n    return this.httpClient.post(\n      \"/api/votes/\",\n      vote\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse,\n} from \"@angular/common/http\";\nimport { AuthService } from \"./services/auth.service\";\nimport { Observable, throwError, BehaviorSubject } from \"rxjs\";\nimport { catchError, switchMap, filter, take } from \"rxjs/operators\";\nimport { LoginResponse } from \"./commons/login-response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TokenInterceptor implements HttpInterceptor {\n  isTokenRefreshing = false;\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject(null);\n\n  constructor(public authService: AuthService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (\n      req.url.indexOf(\"refresh\") !== -1 ||\n      req.url.indexOf(\"login\") !== -1 ||\n      req.url.indexOf(\"signup\") !== -1\n    ) {\n      return next.handle(req);\n    }\n\n    const jwtToken = this.authService.getJwtToken();\n\n    if(jwtToken){\n      return next.handle(this.addToken(req, jwtToken)).pipe(\n        catchError((error) => {\n          if (error instanceof HttpErrorResponse && error.status === 403) {\n            return this.handleAuthErrors(req, next);\n          } else {\n            return throwError(error);\n          }\n        })\n      );\n    }\n    return next.handle(req);\n  }\n\n  addToken(req: HttpRequest<any>, jwtToken: any) {\n    return req.clone({\n      headers: req.headers.set(\"Authorization\", `Bearer ${jwtToken}`),\n    });\n  }\n\n  private handleAuthErrors(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.isTokenRefreshing) {\n      this.isTokenRefreshing = true;\n      this.refreshTokenSubject.next(null);\n\n      return this.authService.refreshToken().pipe(\n        switchMap((refreshTokenResponse: LoginResponse) => {\n          this.isTokenRefreshing = true;\n          this.refreshTokenSubject.next(\n            refreshTokenResponse.authenticationToken\n          );\n          return next.handle(\n            this.addToken(req, refreshTokenResponse.authenticationToken)\n          );\n        })\n      );\n    } else {\n      return this.refreshTokenSubject.pipe(\n        filter((result) => result !== null),\n        take(1),\n        switchMap((res) => {\n          return next.handle(this.addToken(req, this.authService.getJwtToken));\n        })\n      );\n    }\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"api\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}